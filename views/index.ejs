<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles/index.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Anonymous+Pro:ital,wght@0,400;0,700;1,400;1,700&family=Atkinson+Hyperlegible+Mono:ital,wght@0,200..800;1,200..800&display=swap');
    </style>
    <title>Vijay Tailors</title>
</head>
<body>
    <form action="/new-bill" method="post">
        <div class="newBill">
            <button class="new_bill">New Bill</button>
        </div>
    </form>
    
    <form id="myForm" action="/submit" method="post">
    <div class="bill">
        <div class="logo-info">
            <p style="color: #A5158C; font-weight: bold;" class="prayer">|| जय गुरुदेव ||</p>
            <img class="logo-on-bill" src="/images/VijayTailors.png" alt="">
            <pre style="color: #A5158C; font-weight: bold;" class="store-address">शॉप नं-1, ब्लॉक-C, मंगल श्री अप्पार्टमेन्ट, तिलक नगर, इंदौर, 452018        मोबाइल: 7693057579</pre>
        </div>

        <div class="invoice-info">
            <div class="row">
                <label style="color: #A5158C; font-weight: bold;">बिल नंबर</label> 
                <input type="text" name="invoice_number" 
                value="<%= locals.invoice_number %>" class="line-input" readonly>

                <label style="color: #A5158C; font-weight: bold;">तरीक </label> 
                <input type="date" name="invoice_date" class="line-input">
            </div>

            <div class="row">
                <label style="color: #A5158C; font-weight: bold;">डिलीवरी दिनांक</label> 
                <input type="date" name="delivery_date" class="line-input">

                <label style="color: #A5158C; font-weight: bold;">फ़ोन नं.</label> 
                <input type="number" name="customer_contact" class="line-input">
            </div>

            <div class="row">
                <label style="color: #A5158C; font-weight: bold;">श्री/श्रीमती/कुमारी</label> 
                <input type="text" name="customer_name" class="line-input" id="name">
            </div>
        </div>

        <div class="products-heading grid-box">
            <div style="background-color: #DB8DD0;" class="grid-item header Number-grid">
                <pre style="color: #A5158C; font-weight: bold;">नग</pre>
            </div>
            <div style="background-color: #DB8DD0;" class="grid-item header product-grid">
                <pre style="color: #A5158C; font-weight: bold;">विवरण</pre>
            </div>
            <div style="background-color: #DB8DD0;" class="grid-item header Money-grid">
                <pre style="color: #A5158C; font-weight: bold;">रकम</pre>
            </div>

            <div class="grid-item description number-col">
                <input class="Serial" name="serial1" type="text">
                <input class="Serial" name="serial2" type="text">
                <input class="Serial" name="serial3" type="text">
                <input class="Serial" name="serial4" type="text">
                <input class="Serial" name="serial5" type="text">
                <input class="Serial" name="serial6" type="text">
                <input class="Serial" name="serial7" type="text">
                <input class="Serial" name="serial8" type="text">
            </div>

            <div class="grid-item description product-col">
                <input class="product-desc" name="product-desc1" type="text">
                <input class="product-desc" name="product-desc2" type="text">
                <input class="product-desc" name="product-desc3" type="text">
                <input class="product-desc" name="product-desc4" type="text">
                <input class="product-desc" name="product-desc5" type="text">
                <input class="product-desc" name="product-desc6" type="text">
                <input class="product-desc" name="product-desc7" type="text">
                <input class="product-desc" name="product-desc8" type="text">
                
                
                <div class="bill-bottom-info">
                    
                    
                </div>
            </div>
            
            <div class="grid-item description money-col">
                <input class="money-each" id="money_1" name="money-for-product-1" type="text">
                <input class="money-each" id="money_2" name="money-for-product-2" type="text">
                <input class="money-each" id="money_3" name="money-for-product-3" type="text">
                <input class="money-each" id="money_4" name="money-for-product-4" type="text">
                <input class="money-each" id="money_5" name="money-for-product-5" type="text">
                <input class="money-each" id="money_6" name="money-for-product-6" type="text">
                <input class="money-each" id="money_7" name="money-for-product-7" type="text">
                <input class="money-each" id="money_8" name="money-for-product-8" type="text">
                
            </div>
        </div>
        
        <div class="submit-btn">
            <button class="submit-button" type="submit">save</button>
        </div>

        <div id="response"></div>

        <div class="amount-summary-store-timings">
            <div class="store-timings">
                <p style="color: #A5158C; font-weight: bold;">प्रात 11 से शाम 8 बजे तक |</p>
            </div>
            
            <div class="money-info">
                <p style="color: #A5158C; font-weight: bold;" class="money-info-total">टोटल</p>
                <p style="color: #A5158C; font-weight: bold;" class="money-info-advance">50% एडवांस</p>
                <p style="color: #A5158C; font-weight: bold;" class="money-info-rem">बाकी</p>
            </div>
            
            <div class="amount-summary">
                <div class="grid-money total">
                    <input type="text" id="money-total" value="<%= locals.totalBill %>" name="money_total">
                </div>
                <div class="grid-money advance">
                    <input type="text" name ="money_advance">
                </div>
                <div class="grid-money remain">
                    <input type="text" value= "<%= locals.remainingBill %> " name="money_remaining">
                </div>
            </div>
        </div>

        <div class="note">
            <p>लेबर की वजह से डिलीवरी दिनांक मे परिवर्तन हो सकता है | एक महीने पश्चात् कपड़ो की जवाबदारी हमारी नहीं रहेगी </p>
        </div>
    </div>
    </form> 

    <div class="print-bill">
        <button class="print-button" onclick="printBill()">Print</button>
    </div>

    <form action="/export" method="post">
        <div class="exportAll">
            <button class="exportAllButton" id="exportBtn" type="button">Export All Data (Excel)</button>
            <p id="statusMsg"></p>
        </div>
    </form>
        


    <div class="whiteboard-container">
        <h2 style="text-align:center; font-family:'Atkinson Hyperlegible Mono', sans-serif;">Whiteboard</h2>

        <!-- <iframe 
            src="https://excalidraw.com" 
            class="whiteboard-frame">
        </iframe> -->
        <%- include('white-test.ejs') %>

    </div>

    <script>
        window.onload = function () {
            const billElement = document.querySelector(".newBill");
            if (billElement) {
                billElement.scrollIntoView({ behavior: "smooth" }); // or "auto" for instant scroll
            }
        };

        function calculateTotal(){
            let total = 0;
            for (let i = 1; i <= 8; i++) {
                const input = document.getElementById(`money_${i}`);
                if (input && input.value) {
                    const val = parseFloat(input.value);
                    if (!isNaN(val)) {
                        total += val;
                    }
                }
            }
            document.getElementById("money-total").value = total.toFixed(2);
            calculateRemaining();
        }  

        function calculateRemaining(){
            const totalMoney = document.getElementById("money-total");
            const advanceMoney = document.querySelector('input[name = "money_advance"]');
            const remainingMoney = document.querySelector('input[name = "money_remaining"]');

            if(totalMoney && advanceMoney && remainingMoney){
                const total = parseFloat(totalMoney.value) || 0;
                const advance = parseFloat(advanceMoney.value) || 0;
                const remamining = parseFloat(remainingMoney.value) || 0;
                
                const amount_remain = total - advance;
                remainingMoney.value = amount_remain.toFixed(2);
            }
        }

        for (let i = 1; i <=8; i++) {
            const input = document.getElementById(`money_${i}`);
            if(input){
                input.addEventListener("input", calculateTotal);
            }
        }

        const advance_money = document.querySelector('input[name = "money_advance"]');
        if(advance_money){
            advance_money.addEventListener("input", calculateRemaining);
        }

        calculateTotal();

        document.getElementById('myForm').addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent default form submission
            
            const responseDiv = document.getElementById('response');
            const submitButton = document.querySelector('.submit-button');
            
            // Show loading state
            submitButton.disabled = true;
            submitButton.textContent = 'Saving...';
            responseDiv.innerHTML = '<p style="color: blue;">Processing...</p>';
            
            // Get form data
            const formData = new FormData(this);
            
            // Convert FormData to URLSearchParams for proper encoding
            const params = new URLSearchParams();
            for (let [key, value] of formData.entries()) {
                params.append(key, value);
            }
            
            // Send AJAX request
            fetch('/submit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: params.toString()
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    responseDiv.innerHTML = `<p style="color: green; font-weight: bold;">${data.message} - Bill No: ${data.bill_num}</p>`;
                    // Optional: Clear form or redirect after success
                    // this.reset();
                } else {
                    responseDiv.innerHTML = `<p style="color: red; font-weight: bold;">${data.message}</p>`;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                responseDiv.innerHTML = '<p style="color: red; font-weight: bold;">नेटवर्क त्रुटि हुई</p>';
            })
            .finally(() => {
                // Reset button state
                submitButton.disabled = false;
                submitButton.textContent = 'save';
            });
        });




    function printBill() {
        // Clone the bill section
        const billElement = document.querySelector(".bill");
        const clone = billElement.cloneNode(true);

        // Get all form elements from original
        const inputs = billElement.querySelectorAll("input, textarea, select");
        const cloneInputs = clone.querySelectorAll("input, textarea, select");

        // Copy values and convert inputs to plain text for printing
        inputs.forEach((input, index) => {
            const cloneInput = cloneInputs[index];
            
            if (input.type === "checkbox" || input.type === "radio") {
                cloneInput.checked = input.checked;
                
                // For mobile compatibility, also set the value attribute
                if (input.checked) {
                    cloneInput.setAttribute('checked', 'checked');
                } else {
                    cloneInput.removeAttribute('checked');
                }
            } else if (input.tagName === "SELECT") {
                // Handle select elements
                cloneInput.value = input.value;
                
                // Set selected attribute on the correct option
                const originalOptions = input.querySelectorAll('option');
                const cloneOptions = cloneInput.querySelectorAll('option');
                
                originalOptions.forEach((option, optIndex) => {
                    if (option.selected) {
                        cloneOptions[optIndex].setAttribute('selected', 'selected');
                    } else {
                        cloneOptions[optIndex].removeAttribute('selected');
                    }
                });
            } else {
                // Handle input and textarea elements
                cloneInput.value = input.value;
                cloneInput.setAttribute('value', input.value);
                
                // For textarea, also set the text content
                if (input.tagName === "TEXTAREA") {
                    cloneInput.textContent = input.value;
                }
            }
        });

        // Create a hidden iframe for printing (more mobile-friendly)
        const printFrame = document.createElement('iframe');
        printFrame.style.position = 'absolute';
        printFrame.style.top = '-9999px';
        printFrame.style.left = '-9999px';
        printFrame.style.width = '0px';
        printFrame.style.height = '0px';
        printFrame.style.border = 'none';
        
        document.body.appendChild(printFrame);
        
        // Get the current page's stylesheets
        const stylesheets = Array.from(document.styleSheets);
        let cssText = '';
        
        stylesheets.forEach(sheet => {
            try {
                if (sheet.cssRules) {
                    Array.from(sheet.cssRules).forEach(rule => {
                        cssText += rule.cssText + '\n';
                    });
                }
            } catch (e) {
                // Handle cross-origin stylesheets
                if (sheet.href) {
                    cssText += `@import url("${sheet.href}");\n`;
                }
            }
        });
        
        // Prepare the iframe content
        const frameDoc = printFrame.contentDocument || printFrame.contentWindow.document;
        frameDoc.open();
        frameDoc.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Print Bill</title>
                <style>
                    ${cssText}
                    
                    /* Additional print-specific styles */
                    @media print {
                        * {
                            -webkit-print-color-adjust: exact !important;
                            color-adjust: exact !important;
                        }

                        #response {
                            display: none !important;
                        }
                        
                        input[type="checkbox"]:checked::before {
                            content: "✓" !important;
                            display: inline-block !important;
                            font-size: 12px !important;
                            line-height: 1 !important;
                        }
                        
                        input[type="radio"]:checked::before {
                            content: "●" !important;
                            display: inline-block !important;
                            font-size: 12px !important;
                            line-height: 1 !important;
                        }
                    }
                </style>
            </head>
            <body>
                ${clone.outerHTML}
            </body>
            </html>
        `);
        frameDoc.close();
        
        // Wait for the iframe to load completely
        printFrame.onload = function() {
            try {
                // Focus the iframe and trigger print
                printFrame.contentWindow.focus();
                printFrame.contentWindow.print();
                
                // Clean up after printing
                setTimeout(() => {
                    document.body.removeChild(printFrame);
                }, 1000);
            } catch (error) {
                console.error('Print error:', error);
                // Fallback to original method if iframe fails
                fallbackPrint();
            }
        };
        
        // Fallback function for browsers that don't support iframe printing
        function fallbackPrint() {
            // Clean up the iframe if it exists
            if (printFrame && printFrame.parentNode) {
                document.body.removeChild(printFrame);
            }
            
            // Save original HTML
            const originalHTML = document.body.innerHTML;
            
            // Replace body with cloned bill
            document.body.innerHTML = "";
            document.body.appendChild(clone);
            
            // Add print styles directly to the document
            const printStyles = document.createElement('style');
            printStyles.textContent = `
                @media print {
                    * {
                        -webkit-print-color-adjust: exact !important;
                        color-adjust: exact !important;
                    }
                }
            `;
            document.head.appendChild(printStyles);
            
            // Trigger print
            window.print();
            
            // Restore original HTML after printing
            setTimeout(() => {
                document.body.innerHTML = originalHTML;
                location.reload(); // Restore full functionality
            }, 500);
        }
        
        // Set a timeout fallback in case iframe doesn't load
        setTimeout(() => {
            if (printFrame && printFrame.parentNode) {
                console.log('Iframe print timeout, using fallback');
                fallbackPrint();
            }
        }, 3000);
    }

    document.getElementById("exportBtn").addEventListener("click", async function() {
        const button = this;
        const statusMsg = document.getElementById("statusMsg");
        
        // Show loading state
        button.disabled = true;
        button.textContent = 'Exporting Excel...';
        statusMsg.innerHTML = '<span style="color: blue;">Processing...</span>';
        
        try {
            const response = await fetch("/export", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            });

            if (response.ok) {
                // Check if response is JSON (error) or file (success)
                const contentType = response.headers.get('content-type');
                
                if (contentType && contentType.includes('application/json')) {
                    const data = await response.json();
                    statusMsg.innerHTML = `<span style="color: red; font-weight: bold;">${data.message}</span>`;
                } else {
                    // Handle file download
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `All_Invoice_Data_${new Date().toISOString().split('T')[0]}.xlsx`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                    
                    statusMsg.innerHTML = '<span style="color: green; font-weight: bold;">Excel file downloaded successfully!</span>';
                }
            } else {
                statusMsg.innerHTML = '<span style="color: red; font-weight: bold;">Export failed</span>';
            }
        } catch (error) {
            console.error('Export error:', error);
            statusMsg.innerHTML = '<span style="color: red; font-weight: bold;">नेटवर्क त्रुटि हुई</span>';
        } finally {
            // Reset button state
            button.disabled = false;
            button.textContent = 'Export All Data (Excel)';
        }
    });

    </script>

</body>
</html>
