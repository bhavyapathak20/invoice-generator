<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Whiteboard</title>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script> -->
    <link rel="stylesheet" href="/styles/whiteboard.css">
</head>
<body>
    <div class="toolbar">
        <div class="toolbar-section">
            <button class="tool-btn active" id="penTool">✏️ Pen</button>
            <button class="tool-btn" id="eraserTool">🗑️ Eraser</button>
            <input type="color" class="color-picker" id="colorPicker" value="#000000">
            <input type="range" class="size-slider" id="sizeSlider" min="1" max="50" value="3">
            <span class="size-display" id="sizeDisplay">3px</span>
        </div>
        
        <div class="toolbar-section">
            <button class="tool-btn" id="clearBtn">🗑️ Clear All</button>
            <button class="tool-btn" id="saveBtn">💾 Save</button>
            <button class="tool-btn" id="loadBtn">📁 Load</button>
            <button class="tool-btn" id="importBtn">📂 Import</button>
            <button class="tool-btn" id="exportPdfBtn">📄 Export PDF</button>
            <button class="tool-btn" id="printBtn">🖨️ Print</button>
        </div>
    </div>

    <div class="canvas-container">
        <canvas id="whiteboard"></canvas>
    </div>

    <!-- Save Modal -->
    <div id="saveModal" class="modal">
        <div class="modal-content">
            <h3>Save Whiteboard</h3>
            <input type="text" id="saveName" placeholder="Enter name for your drawing" style="width: 100%; padding: 10px; margin-bottom: 15px; border: 2px solid #e1e5e9; border-radius: 8px;">
            <div class="modal-buttons">
                <button class="modal-btn secondary" id="cancelSave">Cancel</button>
                <button class="modal-btn primary" id="confirmSave">Save</button>
            </div>
        </div>
    </div>

    <!-- Load Modal -->
    <div id="loadModal" class="modal">
        <div class="modal-content">
            <h3>Load Saved Drawings</h3>
            <div id="savedItems" class="saved-items"></div>
            <div class="modal-buttons">
                <button class="modal-btn secondary" id="cancelLoad">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Import Modal -->
    <div id="importModal" class="modal">
        <div class="modal-content">
            <h3>Import Image</h3>
            <div class="file-input" id="fileInputDiv">
                <input type="file" id="fileInput" accept="image/*">
                <p>Click here to select an image file</p>
            </div>
            <div class="modal-buttons">
                <button class="modal-btn secondary" id="cancelImport">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        class InteractiveWhiteboard {
            constructor() {
                this.canvas = document.getElementById('whiteboard');
                this.ctx = this.canvas.getContext('2d');
                this.isDrawing = false;
                this.currentTool = 'pen';
                this.currentColor = '#000000';
                this.currentSize = 3;
                this.strokes = [];
                this.currentStroke = null;
                
                this.setupCanvas();
                this.setupEventListeners();
                this.loadSavedDrawings();
            }

            setupCanvas() {
                this.resizeCanvas();
                window.addEventListener('resize', () => this.resizeCanvas());
            }

            resizeCanvas() {
                const container = this.canvas.parentElement;
                this.canvas.width = container.clientWidth;
                this.canvas.height = container.clientHeight;
                this.redrawCanvas();
            }

            setupEventListeners() {
                // Tool buttons
                document.getElementById('penTool').addEventListener('click', () => this.setTool('pen'));
                document.getElementById('eraserTool').addEventListener('click', () => this.setTool('eraser'));
                
                // Color and size controls
                document.getElementById('colorPicker').addEventListener('change', (e) => {
                    this.currentColor = e.target.value;
                });
                
                document.getElementById('sizeSlider').addEventListener('input', (e) => {
                    this.currentSize = parseInt(e.target.value);
                    document.getElementById('sizeDisplay').textContent = this.currentSize + 'px';
                    
                    // Update eraser cursor size
                    if (this.currentTool === 'eraser') {
                        this.updateEraserCursor();
                    }
                });

                // Action buttons
                document.getElementById('clearBtn').addEventListener('click', () => this.clearCanvas());
                document.getElementById('saveBtn').addEventListener('click', () => this.showSaveModal());
                document.getElementById('loadBtn').addEventListener('click', () => this.showLoadModal());
                document.getElementById('importBtn').addEventListener('click', () => this.showImportModal());
                document.getElementById('exportPdfBtn').addEventListener('click', () => this.exportToPDF());
                document.getElementById('printBtn').addEventListener('click', () => this.printCanvas());

                // Canvas drawing events
                this.canvas.addEventListener('mousedown', (e) => this.startDrawing(e));
                this.canvas.addEventListener('mousemove', (e) => this.draw(e));
                this.canvas.addEventListener('mouseup', () => this.stopDrawing());
                this.canvas.addEventListener('mouseout', () => this.stopDrawing());

                // Touch events for mobile
                this.canvas.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    const touch = e.touches[0];
                    const mouseEvent = new MouseEvent('mousedown', {
                        clientX: touch.clientX,
                        clientY: touch.clientY
                    });
                    this.canvas.dispatchEvent(mouseEvent);
                });

                this.canvas.addEventListener('touchmove', (e) => {
                    e.preventDefault();
                    const touch = e.touches[0];
                    const mouseEvent = new MouseEvent('mousemove', {
                        clientX: touch.clientX,
                        clientY: touch.clientY
                    });
                    this.canvas.dispatchEvent(mouseEvent);
                });

                this.canvas.addEventListener('touchend', (e) => {
                    e.preventDefault();
                    const mouseEvent = new MouseEvent('mouseup', {});
                    this.canvas.dispatchEvent(mouseEvent);
                });

                // Modal events
                this.setupModalEvents();
            }

            setupModalEvents() {
                // Save modal
                document.getElementById('cancelSave').addEventListener('click', () => this.hideModal('saveModal'));
                document.getElementById('confirmSave').addEventListener('click', () => this.saveDrawing());

                // Load modal
                document.getElementById('cancelLoad').addEventListener('click', () => this.hideModal('loadModal'));

                // Import modal
                document.getElementById('cancelImport').addEventListener('click', () => this.hideModal('importModal'));
                document.getElementById('fileInputDiv').addEventListener('click', () => {
                    document.getElementById('fileInput').click();
                });
                document.getElementById('fileInput').addEventListener('change', (e) => this.importImage(e));

                // Close modals when clicking outside
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.addEventListener('click', (e) => {
                        if (e.target === modal) {
                            this.hideModal(modal.id);
                        }
                    });
                });
            }

            setTool(tool) {
                this.currentTool = tool;
                document.querySelectorAll('.tool-btn').forEach(btn => btn.classList.remove('active'));
                document.getElementById(tool + 'Tool').classList.add('active');
                
                if (tool === 'pen') {
                    this.canvas.style.cursor = 'crosshair';
                    this.removeEraserCursor();
                } else if (tool === 'eraser') {
                    this.updateEraserCursor();
                }
            }

            updateEraserCursor() {
                // Create custom eraser cursor
                const size = this.currentSize * 2;
                const canvas = document.createElement('canvas');
                canvas.width = size + 2;
                canvas.height = size + 2;
                const ctx = canvas.getContext('2d');
                
                // Draw eraser cursor
                ctx.strokeStyle = '#666';
                ctx.lineWidth = 2;
                ctx.setLineDash([4, 4]);
                ctx.beginPath();
                ctx.arc(canvas.width / 2, canvas.height / 2, size / 2, 0, 2 * Math.PI);
                ctx.stroke();
                
                const cursorUrl = canvas.toDataURL();
                this.canvas.style.cursor = `url(${cursorUrl}) ${canvas.width/2} ${canvas.height/2}, auto`;
            }

            removeEraserCursor() {
                this.canvas.style.cursor = 'crosshair';
            }

            getMousePos(e) {
                const rect = this.canvas.getBoundingClientRect();
                return {
                    x: e.clientX - rect.left,
                    y: e.clientY - rect.top
                };
            }

            startDrawing(e) {
                this.isDrawing = true;
                const pos = this.getMousePos(e);
                
                if (this.currentTool === 'pen') {
                    this.currentStroke = {
                        type: 'pen',
                        color: this.currentColor,
                        size: this.currentSize,
                        points: [pos]
                    };
                } else if (this.currentTool === 'eraser') {
                    this.eraseAt(pos);
                }
            }

            draw(e) {
                if (!this.isDrawing) return;
                
                const pos = this.getMousePos(e);
                
                if (this.currentTool === 'pen') {
                    this.currentStroke.points.push(pos);
                    this.redrawCanvas();
                    this.drawStroke(this.currentStroke);
                } else if (this.currentTool === 'eraser') {
                    this.eraseAt(pos);
                }
            }

            stopDrawing() {
                if (!this.isDrawing) return;
                
                this.isDrawing = false;
                
                if (this.currentTool === 'pen' && this.currentStroke) {
                    this.strokes.push(this.currentStroke);
                    this.currentStroke = null;
                }
            }

            drawStroke(stroke) {
                if (stroke.points.length < 2) return;
                
                this.ctx.beginPath();
                this.ctx.strokeStyle = stroke.color;
                this.ctx.lineWidth = stroke.size;
                this.ctx.lineCap = 'round';
                this.ctx.lineJoin = 'round';
                
                this.ctx.moveTo(stroke.points[0].x, stroke.points[0].y);
                for (let i = 1; i < stroke.points.length; i++) {
                    this.ctx.lineTo(stroke.points[i].x, stroke.points[i].y);
                }
                this.ctx.stroke();
            }

            eraseAt(pos) {
                const eraserRadius = this.currentSize;
                
                // Use composite operation to erase pixels
                this.ctx.globalCompositeOperation = 'destination-out';
                this.ctx.beginPath();
                this.ctx.arc(pos.x, pos.y, eraserRadius, 0, 2 * Math.PI);
                this.ctx.fill();
                
                // Reset composite operation
                this.ctx.globalCompositeOperation = 'source-over';
                
                // Update strokes data to match what's visible on canvas
                this.updateStrokesFromCanvas();
            }

            updateStrokesFromCanvas() {
                // Get the current canvas image data
                const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
                const data = imageData.data;
                
                // Filter strokes to only include visible pixels
                this.strokes = this.strokes.filter(stroke => {
                    return this.strokeHasVisiblePixels(stroke, data);
                });
            }

            strokeHasVisiblePixels(stroke, imageData) {
                // Check if any part of the stroke is still visible
                for (let point of stroke.points) {
                    const x = Math.floor(point.x);
                    const y = Math.floor(point.y);
                    
                    if (x >= 0 && x < this.canvas.width && y >= 0 && y < this.canvas.height) {
                        const index = (y * this.canvas.width + x) * 4;
                        const alpha = imageData[index + 3];
                        
                        if (alpha > 0) {
                            return true;
                        }
                    }
                }
                return false;
            }

            redrawCanvas() {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.strokes.forEach(stroke => this.drawStroke(stroke));
            }

            clearCanvas() {
                this.strokes = [];
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            }

            showSaveModal() {
                document.getElementById('saveModal').style.display = 'block';
                document.getElementById('saveName').focus();
            }

            showLoadModal() {
                this.updateSavedItemsList();
                document.getElementById('loadModal').style.display = 'block';
            }

            showImportModal() {
                document.getElementById('importModal').style.display = 'block';
            }

            hideModal(modalId) {
                document.getElementById(modalId).style.display = 'none';
            }

            saveDrawing() {
                const name = document.getElementById('saveName').value.trim();
                if (!name) {
                    alert('Please enter a name for your drawing');
                    return;
                }

                const drawingData = {
                    name: name,
                    strokes: this.strokes,
                    thumbnail: this.canvas.toDataURL('image/png', 0.3),
                    timestamp: new Date().toISOString()
                };

                const savedDrawings = this.getSavedDrawings();
                savedDrawings[name] = drawingData;
                this.setSavedDrawings(savedDrawings);

                document.getElementById('saveName').value = '';
                this.hideModal('saveModal');
                
                // Show success message
                this.showToast('Drawing saved successfully!');
            }

            loadDrawing(name) {
                const savedDrawings = this.getSavedDrawings();
                if (savedDrawings[name]) {
                    this.strokes = savedDrawings[name].strokes;
                    this.redrawCanvas();
                    this.hideModal('loadModal');
                    this.showToast('Drawing loaded successfully!');
                }
            }

            getSavedDrawings() {
                const saved = localStorage.getItem('whiteboardDrawings');
                return saved ? JSON.parse(saved) : {};
            }

            setSavedDrawings(drawings) {
                localStorage.setItem('whiteboardDrawings', JSON.stringify(drawings));
            }

            loadSavedDrawings() {
                // This method can be used to preload any saved drawings if needed
            }

            updateSavedItemsList() {
                const savedItems = document.getElementById('savedItems');
                const savedDrawings = this.getSavedDrawings();
                
                savedItems.innerHTML = '';
                
                Object.keys(savedDrawings).forEach(name => {
                    const drawing = savedDrawings[name];
                    const item = document.createElement('div');
                    item.className = 'saved-item';
                    item.innerHTML = `
                        <img src="${drawing.thumbnail}" alt="${name}">
                        <div class="saved-item-name">${name}</div>
                    `;
                    item.addEventListener('click', () => this.loadDrawing(name));
                    savedItems.appendChild(item);
                });

                if (Object.keys(savedDrawings).length === 0) {
                    savedItems.innerHTML = '<p style="text-align: center; color: #666; grid-column: 1 / -1;">No saved drawings found</p>';
                }
            }

            importImage(e) {
                const file = e.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = (event) => {
                    const img = new Image();
                    img.onload = () => {
                        // Scale image to fit canvas
                        const scale = Math.min(
                            this.canvas.width / img.width,
                            this.canvas.height / img.height
                        );
                        const width = img.width * scale;
                        const height = img.height * scale;
                        const x = (this.canvas.width - width) / 2;
                        const y = (this.canvas.height - height) / 2;

                        this.ctx.drawImage(img, x, y, width, height);
                        this.hideModal('importModal');
                        this.showToast('Image imported successfully!');
                    };
                    img.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }

            exportToPDF() {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: 'landscape',
                    unit: 'px',
                    format: [this.canvas.width, this.canvas.height]
                });

                const imgData = this.canvas.toDataURL('image/png');
                pdf.addImage(imgData, 'PNG', 0, 0, this.canvas.width, this.canvas.height);
                pdf.save('whiteboard.pdf');
                this.showToast('PDF exported successfully!');
            }

            printCanvas() {
                const printWindow = window.open('', '_blank');
                const imgData = this.canvas.toDataURL('image/png');
                
                printWindow.document.write(`
                    <html>
                        <head><title>Whiteboard Print</title></head>
                        <body style="margin: 0; padding: 0;">
                            <img src="${imgData}" style="max-width: 100%; height: auto;">
                        </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.print();
            }

            showToast(message) {
                const toast = document.createElement('div');
                toast.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #4CAF50;
                    color: white;
                    padding: 12px 24px;
                    border-radius: 8px;
                    z-index: 3000;
                    font-weight: 500;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                `;
                toast.textContent = message;
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
        }

        // Initialize the whiteboard when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new InteractiveWhiteboard();
        });
    </script>
</body>
</html>