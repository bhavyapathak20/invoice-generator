<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excalidraw Clone</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            /* font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; */
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            /* background: #f5f5f5; */
        } 
        
        /* .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 8px 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            min-height: 60px;
        } */
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .toolbar {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .tool-group {
            display: flex;
            gap: 4px;
            padding: 4px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .tool-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            position: relative;
            overflow: hidden;
        }
        
        .tool-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s ease;
        }
        
        .tool-btn:hover::before {
            left: 100%;
        }
        
        .tool-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }
        
        .tool-btn.active {
            background: linear-gradient(45deg, #764ba2, #667eea);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(118, 75, 162, 0.4);
        }
        
        .color-picker {
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            transition: all 0.2s ease;
        }
        
        .color-picker:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
        }
        
        .slider-container {
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(255, 255, 255, 0.8);
            padding: 8px 12px;
            border-radius: 8px;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .slider {
            width: 80px;
            height: 4px;
            border-radius: 2px;
            background: linear-gradient(to right, #667eea, #764ba2);
            outline: none;
            cursor: pointer;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            position: relative;
            overflow: hidden;
            padding: 10px;
        }
        
        .canvas-container {
            flex: 1;
            position: relative;
            background: 
                radial-gradient(circle at 1px 1px, rgba(255, 255, 255, 0.3) 1px, transparent 0);
            background-size: 20px 20px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            background-color: white;
        }
        
        .canvas-wrapper {
            width: 100%;
            height: 100%;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        #canvas {
            background: white;
            border-radius: 12px;
            box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.05);
        }
        
        .status-bar {
            background: rgba(255, 255, 255, 0.9);
            padding: 8px 20px;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #666;
            min-height: 40px;
        }
        
        .file-input {
            display: none;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 15px;
            }
            
            .toolbar {
                justify-content: center;
            }
            
            .tool-group {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <!-- <div class="logo">‚úèÔ∏è DrawBoard Pro</div> -->
        <div class="toolbar">
            <div class="tool-group">
                <button class="tool-btn active" data-tool="select">Select</button>
                <button class="tool-btn" data-tool="pencil">Pencil</button>
                <button class="tool-btn" data-tool="eraser">Eraser</button>
                <button class="tool-btn" data-tool="text">Text</button>
            </div>
            
            <div class="tool-group">
                <input type="color" class="color-picker" id="strokeColor" value="#667eea">
                <input type="color" class="color-picker" id="fillColor" value="#764ba2">
            </div>
            
            <div class="slider-container">
                <span>Width:</span>
                <input type="range" class="slider" id="strokeWidth" min="1" max="20" value="2">
                <span id="widthValue">2</span>
            </div>
            
            <div class="tool-group">
                <button class="tool-btn" onclick="importFile()">üìÅ Import</button>
                <button class="tool-btn" onclick="saveAsPNG()">üíæ Save PNG</button>
                <button class="tool-btn" onclick="exportPDF()">üìÑ PDF</button>
                <button class="tool-btn" onclick="printCanvas()">üñ®Ô∏è Print</button>
                <button class="tool-btn" onclick="clearCanvas()">üóëÔ∏è Clear</button>
            </div>
        </div>
    </div>
    
    <div class="main-content">
        <div class="canvas-container">
            <div class="canvas-wrapper">
                <canvas id="canvas"></canvas>
            </div>
        </div>
    </div>
    
    <div class="status-bar">
        <span>Ready ‚Ä¢ Use mouse to draw ‚Ä¢ Right-click to access context menu</span>
        <span id="coords">Position: (0, 0)</span>
    </div>
    
    <input type="file" class="file-input" id="fileInput" accept="image/*,.json" onchange="handleFileImport(this)">
    
    <div class="notification" id="notification"></div>
    
    <script>
        // Calculate canvas size based on available space
        function calculateCanvasSize() {
            const headerHeight = 60;
            const statusBarHeight = 40;
            const padding = 20; // 10px padding on each side
            
            const availableWidth = window.innerWidth - padding;
            const availableHeight = window.innerHeight - headerHeight - statusBarHeight - padding;
            
            return {
                width: Math.max(800, availableWidth),
                height: Math.max(600, availableHeight)
            };
        }
        
        // Initialize Fabric.js canvas with larger size
        const canvasSize = calculateCanvasSize();
        const canvas = new fabric.Canvas('canvas', {
            width: canvasSize.width,
            height: canvasSize.height,
            backgroundColor: 'white'
        });
        
        // Global variables
        let currentTool = 'select';
        let isDrawing = false;
        let startX, startY;
        let activeObject = null;
        let isErasing = false;
        
        // Simple eraser using PencilBrush with white color
        function setupEraser() {
            canvas.isDrawingMode = true;
            canvas.selection = false;
            isErasing = true;
            
            // Use PencilBrush with white color to "erase" (paint over with background color)
            canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
            canvas.freeDrawingBrush.width = parseInt(document.getElementById('strokeWidth').value) * 2;
            canvas.freeDrawingBrush.color = 'white'; // Use white to match canvas background
            
            // Update cursor
            updateEraserCursor();
        }
        
        function updateEraserCursor() {
            // Simple crosshair cursor for eraser
            canvas.freeDrawingCursor = 'crosshair';
        }
        
        function cleanupEraser() {
            if (isErasing) {
                isErasing = false;
                canvas.freeDrawingCursor = 'crosshair';
            }
        }
        
        // Tool selection
        document.querySelectorAll('.tool-btn[data-tool]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.tool-btn[data-tool]').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                
                // Clean up previous tool
                cleanupEraser();
                
                currentTool = e.target.dataset.tool;
                
                // Set canvas mode based on tool
                if (currentTool === 'select') {
                    canvas.isDrawingMode = false;
                    canvas.selection = true;
                    canvas.defaultCursor = 'default';
                } else if (currentTool === 'pencil') {
                    canvas.isDrawingMode = true;
                    canvas.selection = false;
                    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
                    canvas.freeDrawingBrush.width = parseInt(document.getElementById('strokeWidth').value);
                    canvas.freeDrawingBrush.color = document.getElementById('strokeColor').value;
                } else if (currentTool === 'eraser') {
                    setupEraser();
                } else {
                    canvas.isDrawingMode = false;
                    canvas.selection = false;
                }
            });
        });
        
        // Color and stroke width controls
        document.getElementById('strokeColor').addEventListener('change', (e) => {
            if (canvas.freeDrawingBrush && currentTool === 'pencil') {
                canvas.freeDrawingBrush.color = e.target.value;
            }
        });
        
        document.getElementById('strokeWidth').addEventListener('input', (e) => {
            if (canvas.freeDrawingBrush) {
                if (currentTool === 'pencil') {
                    canvas.freeDrawingBrush.width = parseInt(e.target.value);
                } else if (currentTool === 'eraser') {
                    canvas.freeDrawingBrush.width = parseInt(e.target.value) * 2;
                }
            }
            document.getElementById('widthValue').textContent = e.target.value;
        });
        
        // Mouse events for drawing shapes
        canvas.on('mouse:down', (e) => {
            if (currentTool === 'text') {
                const pointer = canvas.getPointer(e.e);
                const text = prompt('Enter text:');
                if (text) {
                    const textObj = new fabric.Text(text, {
                        left: pointer.x,
                        top: pointer.y,
                        fill: document.getElementById('strokeColor').value,
                        fontSize: parseInt(document.getElementById('strokeWidth').value) * 8
                    });
                    canvas.add(textObj);
                }
            }
        });
        
        // Mouse position tracking
        canvas.on('mouse:move', (e) => {
            const pointer = canvas.getPointer(e.e);
            document.getElementById('coords').textContent = `Position: (${Math.round(pointer.x)}, ${Math.round(pointer.y)})`;
        });
        
        // Import file function
        function importFile() {
            document.getElementById('fileInput').click();
        }
        
        function handleFileImport(input) {
            const file = input.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            
            if (file.type === 'application/json') {
                reader.onload = (e) => {
                    try {
                        const json = JSON.parse(e.target.result);
                        canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
                        showNotification('Drawing imported successfully!');
                    } catch (error) {
                        showNotification('Error importing JSON file');
                    }
                };
                reader.readAsText(file);
            } else if (file.type.startsWith('image/')) {
                reader.onload = (e) => {
                    fabric.Image.fromURL(e.target.result, (img) => {
                        // Scale image to fit canvas
                        const maxWidth = canvas.width * 0.8;
                        const maxHeight = canvas.height * 0.8;
                        const scale = Math.min(maxWidth / img.width, maxHeight / img.height);
                        
                        img.scale(scale);
                        img.set({
                            left: (canvas.width - img.width * scale) / 2,
                            top: (canvas.height - img.height * scale) / 2
                        });
                        
                        canvas.add(img);
                        canvas.renderAll();
                        showNotification('Image imported successfully!');
                    });
                };
                reader.readAsDataURL(file);
            }
        }
        
        // Get canvas bounds with content
        function getCanvasBounds() {
            const objects = canvas.getObjects();
            if (objects.length === 0) {
                return {
                    left: 0,
                    top: 0,
                    width: canvas.width,
                    height: canvas.height
                };
            }
            
            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
            
            objects.forEach(obj => {
                const bounds = obj.getBoundingRect();
                minX = Math.min(minX, bounds.left);
                minY = Math.min(minY, bounds.top);
                maxX = Math.max(maxX, bounds.left + bounds.width);
                maxY = Math.max(maxY, bounds.top + bounds.height);
            });
            
            // Add some padding
            const padding = 20;
            return {
                left: Math.max(0, minX - padding),
                top: Math.max(0, minY - padding),
                width: Math.min(canvas.width, maxX - minX + 2 * padding),
                height: Math.min(canvas.height, maxY - minY + 2 * padding)
            };
        }
        
        // Save as PNG with proper bounds and centering
        async function saveAsPNG() {
            try {
                const bounds = getCanvasBounds();
                
                // Create a temporary canvas for proper export
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                
                // Set export dimensions (maintain aspect ratio)
                const exportWidth = Math.min(2000, bounds.width * 2); // Max 2000px width
                const exportHeight = (bounds.height / bounds.width) * exportWidth;
                
                tempCanvas.width = exportWidth;
                tempCanvas.height = exportHeight;
                
                // Fill with white background
                tempCtx.fillStyle = 'white';
                tempCtx.fillRect(0, 0, exportWidth, exportHeight);
                
                // Get the original canvas data
                const originalDataUrl = canvas.toDataURL({
                    format: 'png',
                    quality: 1.0,
                    left: bounds.left,
                    top: bounds.top,
                    width: bounds.width,
                    height: bounds.height,
                    multiplier: 1
                });
                
                // Create image and draw it centered
                const img = new Image();
                img.onload = async function() {
                    // Calculate position to center the drawing
                    const x = (exportWidth - img.width) / 2;
                    const y = (exportHeight - img.height) / 2;
                    
                    tempCtx.drawImage(img, x, y);
                    
                    // Convert to blob
                    tempCanvas.toBlob(async (blob) => {
                        // Check if File System Access API is supported
                        if ('showSaveFilePicker' in window) {
                            try {
                                const fileHandle = await window.showSaveFilePicker({
                                    suggestedName: 'my-drawing.png',
                                    types: [{
                                        description: 'PNG Images',
                                        accept: {
                                            'image/png': ['.png']
                                        }
                                    }]
                                });
                                
                                const writable = await fileHandle.createWritable();
                                await writable.write(blob);
                                await writable.close();
                                
                                showNotification('PNG saved successfully!');
                            } catch (err) {
                                if (err.name !== 'AbortError') {
                                    throw err;
                                }
                            }
                        } else {
                            // Fallback for browsers that don't support File System Access API
                            const filename = prompt('Enter filename (without extension):', 'my-drawing');
                            if (!filename) return;
                            
                            const link = document.createElement('a');
                            link.download = filename.endsWith('.png') ? filename : filename + '.png';
                            link.href = URL.createObjectURL(blob);
                            
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                            URL.revokeObjectURL(link.href);
                            
                            showNotification('PNG saved successfully!');
                        }
                    }, 'image/png');
                };
                img.src = originalDataUrl;
                
            } catch (error) {
                console.error('Error saving PNG:', error);
                showNotification('Error saving PNG file');
            }
        }
        
        // Export as PDF
        function exportPDF() {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF();
            
            const bounds = getCanvasBounds();
            
            // Get the cropped image data with proper bounds
            const imgData = canvas.toDataURL({
                format: 'png',
                quality: 1.0,
                left: bounds.left,
                top: bounds.top,
                width: bounds.width,
                height: bounds.height,
                multiplier: 1
            });
            
            // Calculate dimensions to fit PDF page while maintaining aspect ratio
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const margin = 10;
            
            const availableWidth = pdfWidth - (2 * margin);
            const availableHeight = pdfHeight - (2 * margin);
            
            const imgAspectRatio = bounds.width / bounds.height;
            const availableAspectRatio = availableWidth / availableHeight;
            
            let finalWidth, finalHeight;
            if (imgAspectRatio > availableAspectRatio) {
                // Image is wider than available space
                finalWidth = availableWidth;
                finalHeight = availableWidth / imgAspectRatio;
            } else {
                // Image is taller than available space
                finalHeight = availableHeight;
                finalWidth = availableHeight * imgAspectRatio;
            }
            
            // Center the image on the PDF page
            const x = (pdfWidth - finalWidth) / 2;
            const y = (pdfHeight - finalHeight) / 2;
            
            pdf.addImage(imgData, 'PNG', x, y, finalWidth, finalHeight);
            pdf.save('drawing.pdf');
            showNotification('PDF exported successfully!');
        }
        
        function printCanvasMobile(dataUrl, billnum) {
            // Create a hidden iframe for mobile printing
            const printFrame = document.createElement('iframe');
            printFrame.style.position = 'fixed';
            printFrame.style.top = '-9999px';
            printFrame.style.left = '-9999px';
            printFrame.style.width = '1px';
            printFrame.style.height = '1px';
            printFrame.style.border = 'none';
            printFrame.style.opacity = '0';
            printFrame.style.pointerEvents = 'none';
            
            document.body.appendChild(printFrame);
            
            // Create the print content
            const printContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Print Drawing</title>
                    <style>
                        * {
                            margin: 0;
                            padding: 0;
                            box-sizing: border-box;
                        }
                        
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                            padding: 20px;
                            background: white;
                            color: black;
                            line-height: 1.4;
                        }
                        
                        .print-container {
                            max-width: 800px;
                            margin: 0 auto;
                            background: white;
                        }
                        
                        .header {
                            text-align: center;
                            padding: 20px 0;
                            border-bottom: 2px solid #333;
                            margin-bottom: 30px;
                        }
                        
                        .bill-number {
                            font-size: 24px;
                            font-weight: bold;
                            color: #333;
                        }
                        
                        .image-container {
                            text-align: center;
                            padding: 20px 0;
                        }
                        
                        .drawing-image {
                            max-width: 100%;
                            height: auto;
                            border: 1px solid #ddd;
                            border-radius: 4px;
                            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                        }
                        
                        @media print {
                            body {
                                margin: 0;
                                padding: 15px;
                                -webkit-print-color-adjust: exact;
                                color-adjust: exact;
                            }
                            
                            .print-container {
                                max-width: none;
                                margin: 0;
                            }
                            
                            .header {
                                padding: 10px 0;
                                margin-bottom: 20px;
                                border-bottom: 1px solid #000;
                            }
                            
                            .bill-number {
                                font-size: 18px;
                                color: #000;
                            }
                            
                            .image-container {
                                padding: 10px 0;
                            }
                            
                            .drawing-image {
                                max-width: 100%;
                                height: auto;
                                border: 1px solid #000;
                                border-radius: 0;
                                box-shadow: none;
                                page-break-inside: avoid;
                            }
                            
                            @page {
                                margin: 0.5in;
                                size: auto;
                            }
                        }
                        
                        /* Mobile specific styles */
                        @media screen and (max-width: 768px) {
                            body {
                                padding: 10px;
                            }
                            
                            .bill-number {
                                font-size: 20px;
                            }
                            
                            .header {
                                padding: 15px 0;
                                margin-bottom: 20px;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="print-container">
                        <div class="header">
                            <div class="bill-number">Bill Number: ${billnum}</div>
                        </div>
                        <div class="image-container">
                            <img src="${dataUrl}" alt="Drawing" class="drawing-image" onload="window.parent.printFrameLoaded()">
                        </div>
                    </div>
                </body>
                </html>
            `;
            
            // Add a global function to handle frame loading
            window.printFrameLoaded = function() {
                setTimeout(() => {
                    try {
                        printFrame.contentWindow.focus();
                        printFrame.contentWindow.print();
                        
                        // Clean up after printing
                        setTimeout(() => {
                            if (printFrame && printFrame.parentNode) {
                                document.body.removeChild(printFrame);
                            }
                            delete window.printFrameLoaded;
                        }, 1000);
                    } catch (error) {
                        console.error('Mobile print error:', error);
                        // Fallback: try to open in new tab for mobile
                        mobilePrintFallback(dataUrl, billnum);
                    }
                }, 500);
            };
            
            // Write content to iframe
            const frameDoc = printFrame.contentDocument || printFrame.contentWindow.document;
            frameDoc.open();
            frameDoc.write(printContent);
            frameDoc.close();
            
            // Fallback timeout
            setTimeout(() => {
                if (printFrame && printFrame.parentNode) {
                    console.log('Mobile print timeout, trying fallback');
                    mobilePrintFallback(dataUrl, billnum);
                }
            }, 5000);
            
            showNotification('Preparing print...');
        }

        function mobilePrintFallback(dataUrl, billnum) {
            // Clean up any existing iframe
            const existingFrame = document.querySelector('iframe[style*="-9999px"]');
            if (existingFrame) {
                existingFrame.remove();
            }
            
            // For mobile browsers that don't support iframe printing,
            // create a temporary full-screen overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: white;
                z-index: 10000;
                padding: 20px;
                box-sizing: border-box;
                overflow: auto;
            `;
            
            overlay.innerHTML = `
                <div style="max-width: 800px; margin: 0 auto;">
                    <div style="text-align: center; padding: 20px 0; border-bottom: 2px solid #333; margin-bottom: 30px;">
                        <h2 style="margin: 0; font-size: 24px;">Bill Number: ${billnum}</h2>
                    </div>
                    <div style="text-align: center; padding: 20px 0;">
                        <img src="${dataUrl}" alt="Drawing" style="max-width: 100%; height: auto; border: 1px solid #ddd;">
                    </div>
                    <div style="text-align: center; margin-top: 30px;">
                        <button onclick="window.print()" style="background: #007bff; color: white; border: none; padding: 12px 24px; font-size: 16px; border-radius: 4px; cursor: pointer; margin-right: 10px;">Print</button>
                        <button onclick="this.parentElement.parentElement.parentElement.remove()" style="background: #6c757d; color: white; border: none; padding: 12px 24px; font-size: 16px; border-radius: 4px; cursor: pointer;">Close</button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(overlay);
            
            // Auto-trigger print on mobile
            setTimeout(() => {
                window.print();
            }, 500);
            
            showNotification('Print overlay opened');
        }
        
        // Clear canvas
        function clearCanvas() {
            if (confirm('Are you sure you want to clear the canvas?')) {
                canvas.clear();
                canvas.backgroundColor = 'white';
                canvas.renderAll();
                showNotification('Canvas cleared!');
            }
        }
        
        //Show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.add('show');
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // Handle canvas resize
        window.addEventListener('resize', () => {
            const newSize = calculateCanvasSize();
            canvas.setDimensions({
                width: newSize.width,
                height: newSize.height
            });
        });
        
        // Context menu for additional options
        canvas.on('mouse:down', (e) => {
            if (e.e.button === 2) { // Right click
                e.e.preventDefault();
                const object = canvas.getActiveObject();
                if (object) {
                    const action = prompt('Actions: delete, duplicate, or bring-to-front');
                    switch (action) {
                        case 'delete':
                            canvas.remove(object);
                            break;
                        case 'duplicate':
                            object.clone((cloned) => {
                                cloned.set({
                                    left: cloned.left + 10,
                                    top: cloned.top + 10
                                });
                                canvas.add(cloned);
                            });
                            break;
                        case 'bring-to-front':
                            canvas.bringToFront(object);
                            break;
                    }
                    canvas.renderAll();
                }
            }
        });
        
        // Disable context menu
        canvas.wrapperEl.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });
        
        // Initialize
        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
        canvas.freeDrawingBrush.width = 2;
        canvas.freeDrawingBrush.color = '#667eea';
    </script>
</body>
</html>
